<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		">
		<!-- 整合springDataRedis
			核心的API：redisTemplate，用来操作redis服务器的
		 -->
		 <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		 	<!-- 设置key的序列化方式 -->
		 	<property name="keySerializer">
		 		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		 	</property>
		 	<!-- 设置value的序列化方式 -->
		 	<property name="valueSerializer">
		 		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		 	</property>
		 	<!-- 注入连接工厂 -->
		 	<property name="connectionFactory" ref="connectionFactory"></property>
		 </bean>
		 
		 <!-- 创建connectionFactory交给spring容器管理 -->
		 <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		 	<property name="hostName" value="127.0.0.1"></property>
		 	<property name="port" value="6379"></property>
		 	<property name="database" value="0"></property>
		 	<property name="poolConfig" ref="poolConfig"></property>
		 </bean>
		 
		 <!-- 创建连接池的基本配置 -->
		 <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		 	<!-- 最大连接 -->
		 	<property name="maxTotal" value="10"></property>
		 </bean>
		 
		 <!-- 配置消息的监听器
		 	1：监听器的适配器：（配置自定义的监听器）
		 	2：配置监听器容器：（对监听器进行统一管理）
		  -->
		  
		  <!-- 监听器的适配器 -->
		  <bean class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter" id="messageListener">
		  		<constructor-arg>
		  			<!-- 注入自定义的监听器 -->
		  			<bean class="cn.itcast.listener.RedisMessageListener"></bean>
		  		</constructor-arg>
		  </bean>
		  
		  <!-- 配置监听器容器 -->
		  <bean class="org.springframework.data.redis.listener.RedisMessageListenerContainer" id="redisContainer">
		  		<!-- 
		  			* 由于需要和redis进行交互，注入连接工厂
		  			1.订阅的消息主题
		  			2.接收到消息之后处理的监听器
		  		 -->
		  		 <property name="connectionFactory" ref="connectionFactory"></property>
		  		 <property name="messageListeners">
		  		 	<map>
		  		 		<entry key-ref="messageListener">
		  		 			<!-- topic的集合：订阅的主题
		  		 				订阅了一个主题消息：主题的名称（ITCAST）
		  		 				接收到一条消息之后，交由自定义的消息监听器来进行处理
		  		 			 -->
		  		 			<list>
		  		 				<bean class="org.springframework.data.redis.listener.ChannelTopic">
		  		 					<constructor-arg value="ITCAST"></constructor-arg>
		  		 				</bean>
		  		 			</list>
		  		 		</entry>
		  		 	</map>
		  		 </property>
		  		 
		  </bean>
		 
</beans>