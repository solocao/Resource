回顾:
	购物车
		购物车实体
			总金额
			购物项map
			
			add2cart(CartItem item){}
			removeFromCart(String pid){}
			clearCart(){}
			
		购物项实体
			product
			购买数量
			小计
			
			重写编写
			getSubtotal(){
				return product.getShop_price*count
			}
	生成订单
		订单实体
			oid
			收货人信息
			下单时间
			订单状态
			总金额
			User 对象
			List<OrderItem>
		订单项实体
			order对象
			product对象
			itemid
			购买数量
			小计
//////////////////////////////////////////
案例1-我的订单
需求:
	在任意页面上,点击 "我的订单" 将当前用户的订单(包含订单项列表)分页展示出来
步骤分析:
	1.修改 head.jsp 上"我的订单"的连接
		/store/order?method=findMyOrdersByPage&pageNumber=1
	2.在orderservlet中编写 findMyOrdersByPage
		获取pagenumber 设置pagesize 获取当前用户的id
		调用service完成分页查询操作:返回pagebean
		将pagebean放入request域中,请求转发 order_list.jsp
	3.service中操作
		创建pagebean
		设置总条数
		设置当前页数据
	4.dao中操作:
		获取当前页订单数据
			sql:只能查询订单的基本信息,没有订单项
				select * from orders where uid = ? order by ordertime desc limit ?,?
			执行上面的sql,返回的 List<Order>
			遍历orderlist集合,获取到每一个订单,关联查询订单项和商品表,将该订单下的所有信息查询出来,
				封装成orderItem,将每一个orderitem放入当前order的订单项列表中
				SELECT * FROM orderitem oi,product p WHERE oi.pid = p.pid AND oi.oid = '8727C1B22C214E6D865ECFB3B118E330'
			上面的结果用什么封装???
				使用maplisthandler封装, 将查询结果的每一条记录封装成map 
					(key:字段名(和bean属性名一样),value:具体指),将所有的map放入list中返回
				遍历map的list,获取每一个订单的详情,使用beanutils进行封装即可 封装orderitem和product对象,最后将orderitem对象放入订单项列表中
				[{itemid=xxxx,pname=华为,...},{itemid=uyyyyx,pname=中兴,...}]
			
案例2-订单详情
需求:
	在订单列表页面上点击 "去付款",展示出当前的订单的详情.
步骤分析:
	1.修改 "去付款" 连接
		/store/order?method=getById&oid=xxxx
	2.在orderservlet编写getById方法
		获取oid
		调用service查询单个订单 返回值:order
		将order放入request域中,请求转发到order_info.jsp
	3.service中操作
	4.dao中操作
		先查询订单信息(没有订单项)
			select * from orders where oid = ?
		再查询当前订单的订单项
			select * from orderitem oi,product p where oi.pid = p.pid and oi.oid=?
			使用maplisthandler进行封装
				获取每一个订单项详情,封装成orderitem,最后将orderitem添加到订单的订单项列表项即可
				
				
				
案例3-在线支付
需求:
	在详情页面上 输入收货人信息,选择支付的银行,点击确认订单,保存收获人信息,跳转到银行页面,输入用户名(卡号),点击支付,
	最后跳转到商城,提示 订单支付成功,(修改订单的状态)
技术分析:
	在线支付
/////////////////////
在线支付:
	对银行
	对第三方
	
在线支付注意问题:
	给第三方支付那些数据和第三方返回给用户和商城的数据有那些?
	如何保证数据的有效性? 电子签名
		商城将发给第三方的数据经过算法和密钥进行加密(不可逆),生成一个字符串,将原始的数据和加密后生成的字符串一并发送给第三方.
		第三方拿到数据之后,将原来的数据使用同样的算法和密码重新生成一个字符串,
		将其和商城发送过来的加密后的字符串进行比对,若数据是一样的,则证明数据没有被篡改过.
	
商城开户:
	商户编码
	密钥
	算法
/////////////////////////////////
支付步骤的分析:
	1.在订单详情页面上 填写收货人信息, 选择支付银行,点击"确认订单",向商城发送请求
		表单提交
			收货人信息
			支付银行
			订单号
		路径: /store/order?method=pay
	2.在orderservlet中 编写pay方法
		接受收货人信息 订单号
		调用service获取订单,
			设置收货人信息
		更新订单
		
		拼接重定向的字符串

支付成功之后的步骤分析:
	编写callback方法
		获取第三方发送过来的数据(order_id)
		
		通过id获取订单
		修改订单的状态 =1
		更新订单
		
		
案例4-权限过滤
需求:
	访问购物车的时候,需要判断用户是否登录,若没有登录,则提示
技术分析:
	过滤器
过滤器编写步骤:
	1.编写一个类 PrivilegeFilter 
		实现filter接口
		重写方法(主要doFilter)
	2.编写配置文件
		filter
		filter-mapping
步骤分析:
	doFilter方法中的逻辑
		从session中获取用户,
			判断用户是否为空
				若为空:提示"请先登录",请求转发到 /jsp/msg.jsp return
	
/////////////////////////////////////////////////
总结:
查询我的订单
订单详情
在线支付
权限过滤



















